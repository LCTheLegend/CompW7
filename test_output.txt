Generating lexer.ml using ocamllex...
52 states, 469 transitions, table size 2188 bytes
Generating parser.ml and parser.mli using menhir...
File "parser.mly", line 15, characters 62-66:
Warning: the token BYTE is unused.
File "parser.mly", line 16, characters 48-51:
Warning: the token DOT is unused.
File "parser.mly", line 19, characters 35-43:
Warning: the token LBRACKET is unused.
File "parser.mly", line 15, characters 71-74:
Warning: the token LET is unused.
File "parser.mly", line 15, characters 75-78:
Warning: the token NEW is unused.
File "parser.mly", line 15, characters 67-70:
Warning: the token NIL is unused.
File "parser.mly", line 16, characters 35-47:
Warning: the token QUESTIONMARK is unused.
File "parser.mly", line 19, characters 44-52:
Warning: the token RBRACKET is unused.
File "parser.mly", line 16, characters 28-34:
Warning: the token RECORD is unused.
File "parser.mly", line 16, characters 16-22:
Warning: the token STRING is unused.
File "parser.mly", line 14, characters 16-26:
Warning: the token STRING_LIT is unused.
File "parser.mly", line 16, characters 23-27:
Warning: the token VOID is unused.
Building the project with dune...
Running tests in assignment-06-failing-tests...
---------------------------------------
Found test file: assignment-06-failing-tests/test01.dlp
Test #1: assignment-06-failing-tests/test01.dlp
Running compiler: ./_build/default/driver.exe assignment-06-failing-tests/test01.dlp
Lexical error at line 2, characters 8-27: Invalid integer literal
Test FAILED: Compiler did not report an error as expected.

---------------------------------------
Found test file: assignment-06-failing-tests/test02.dlp
Test #2: assignment-06-failing-tests/test02.dlp
Running compiler: ./_build/default/driver.exe assignment-06-failing-tests/test02.dlp
Lexical error at line 2, characters 8-9: Unexpected character: "
Test FAILED: Compiler did not report an error as expected.

---------------------------------------
Found test file: assignment-06-failing-tests/test03.dlp
Test #3: assignment-06-failing-tests/test03.dlp
Running compiler: ./_build/default/driver.exe assignment-06-failing-tests/test03.dlp
Parser error at line 2, character 5
Test FAILED: Compiler did not report an error as expected.

---------------------------------------
Found test file: assignment-06-failing-tests/test04.dlp
Test #4: assignment-06-failing-tests/test04.dlp
Running compiler: ./_build/default/driver.exe assignment-06-failing-tests/test04.dlp
Lexical error at line 2, characters 11-12: Unexpected character: @
Test FAILED: Compiler did not report an error as expected.

---------------------------------------
Found test file: assignment-06-failing-tests/test05.dlp
Test #5: assignment-06-failing-tests/test05.dlp
Running compiler: ./_build/default/driver.exe assignment-06-failing-tests/test05.dlp
Lexical error at line 3, characters 11-11: Unexpected end of file within a comment
Test FAILED: Compiler did not report an error as expected.

---------------------------------------
Found test file: assignment-06-failing-tests/test06.dlp
Test #6: assignment-06-failing-tests/test06.dlp
Running compiler: ./_build/default/driver.exe assignment-06-failing-tests/test06.dlp
Parser error at line 3, character 3
Test FAILED: Compiler did not report an error as expected.

---------------------------------------
Found test file: assignment-06-failing-tests/test07.dlp
Test #7: assignment-06-failing-tests/test07.dlp
Running compiler: ./_build/default/driver.exe assignment-06-failing-tests/test07.dlp
Parser error at line 3, character 21
Test FAILED: Compiler did not report an error as expected.

---------------------------------------
Found test file: assignment-06-failing-tests/test08.dlp
Test #8: assignment-06-failing-tests/test08.dlp
Running compiler: ./_build/default/driver.exe assignment-06-failing-tests/test08.dlp
Parser error at line 3, character 4
Test FAILED: Compiler did not report an error as expected.

---------------------------------------
Found test file: assignment-06-failing-tests/test09.dlp
Test #9: assignment-06-failing-tests/test09.dlp
Running compiler: ./_build/default/driver.exe assignment-06-failing-tests/test09.dlp
Parser error at line 2, character 4
Test FAILED: Compiler did not report an error as expected.

---------------------------------------
Found test file: assignment-06-failing-tests/test10.dlp
Test #10: assignment-06-failing-tests/test10.dlp
Running compiler: ./_build/default/driver.exe assignment-06-failing-tests/test10.dlp
Parser error at line 2, character 24
Test FAILED: Compiler did not report an error as expected.

---------------------------------------
Found test file: assignment-06-failing-tests/test11.dlp
Test #11: assignment-06-failing-tests/test11.dlp
Running compiler: ./_build/default/driver.exe assignment-06-failing-tests/test11.dlp
Parsing successful!
AST:
Program
├─DeclStm: VarDecl
│          └─Declaration
│            ├─Ident: x
│            ├─Type: 
│            └─Body: IntLit(10)
├─ExprStm: Assignment
│          ├─Var(x)
│          └─BooleanLit(true)
└─ReturnValStm: Lval
                └─Var(x)
Fatal error: exception Dune__exe__Semant.TypeError(_)
Test FAILED: Compiler did not report an error as expected.

---------------------------------------
Found test file: assignment-06-failing-tests/test12.dlp
Test #12: assignment-06-failing-tests/test12.dlp
Running compiler: ./_build/default/driver.exe assignment-06-failing-tests/test12.dlp
Parsing successful!
AST:
Program
├─DeclStm: VarDecl
│          └─Declaration
│            ├─Ident: x
│            ├─Type: 
│            └─Body: Call
│                    ├─FunName: print_integer
│                    └─Args
│                      └─IntLit(5)
└─ReturnValStm: IntLit(0)
Semantic analysis successful!
Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %x1 = alloca void
 call void @print_integer (i64 5)
 store void null, void* %x1
 ret i64 0
}

Test FAILED: Compiler did not report an error as expected.

---------------------------------------
Found test file: assignment-06-failing-tests/test13.dlp
Test #13: assignment-06-failing-tests/test13.dlp
Running compiler: ./_build/default/driver.exe assignment-06-failing-tests/test13.dlp
Parsing successful!
AST:
Program
├─DeclStm: VarDecl
│          └─Declaration
│            ├─Ident: x
│            ├─Type: 
│            └─Body: IntLit(10)
├─ExprStm: BinOp
│          ├─Lval
│          │ └─Var(x)
│          ├─PLUS
│          └─IntLit(20)
└─ReturnValStm: IntLit(0)
Semantic analysis successful!
Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %x1 = alloca i64
 store i64 10, i64* %x1
 %x_val2 = load i64, i64* %x1
 %tmp3 = add i64 %x_val2, 20
 ret i64 0
}

Test FAILED: Compiler did not report an error as expected.

---------------------------------------
Found test file: assignment-06-failing-tests/test14.dlp
Test #14: assignment-06-failing-tests/test14.dlp
Running compiler: ./_build/default/driver.exe assignment-06-failing-tests/test14.dlp
Parsing successful!
AST:
Program
├─DeclStm: VarDecl
│          └─Declaration
│            ├─Ident: x
│            ├─Type: 
│            └─Body: IntLit(10)
├─DeclStm: VarDecl
│          └─Declaration
│            ├─Ident: y
│            ├─Type: 
│            └─Body: BooleanLit(true)
├─ExprStm: Assignment
│          ├─Var(x)
│          └─BinOp
│            ├─Lval
│            │ └─Var(x)
│            ├─PLUS
│            └─Lval
│              └─Var(y)
└─ReturnValStm: IntLit(0)
Fatal error: exception Dune__exe__Semant.TypeError(_)
Test FAILED: Compiler did not report an error as expected.

---------------------------------------
Found test file: assignment-06-failing-tests/test15.dlp
Test #15: assignment-06-failing-tests/test15.dlp
Running compiler: ./_build/default/driver.exe assignment-06-failing-tests/test15.dlp
Parsing successful!
AST:
Program
├─DeclStm: VarDecl
│          └─Declaration
│            ├─Ident: x
│            ├─Type: 
│            └─Body: BooleanLit(true)
└─ReturnValStm: Lval
                └─Var(x)
Semantic analysis successful!
Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %x1 = alloca i1
 store i1 1, i1* %x1
 %x_val2 = load i1, i1* %x1
 ret i1 %x_val2
}

Test FAILED: Compiler did not report an error as expected.

=======================================
Test Summary:
Total Tests Run: 15
Passed Tests:    0
Failed Tests:    15
=======================================
Running tests in assignment-06-passing-tests...
---------------------------------------
Found test file: assignment-06-passing-tests/test01.dlp
Test #1: assignment-06-passing-tests/test01.dlp
Running compiler: ./_build/default/driver.exe assignment-06-passing-tests/test01.dlp
Parsing successful!
AST:
Program
├─DeclStm: VarDecl
│          ├─Declaration
│          │ ├─Ident: x
│          │ ├─Type: 
│          │ └─Body: IntLit(10)
│          ├─Declaration
│          │ ├─Ident: y
│          │ ├─Type: 
│          │ └─Body: IntLit(20)
│          └─Declaration
│            ├─Ident: z
│            ├─Type: 
│            └─Body: BinOp
│                    ├─Lval
│                    │ └─Var(x)
│                    ├─PLUS
│                    └─Lval
│                      └─Var(y)
└─ReturnValStm: Lval
                └─Var(z)
Semantic analysis successful!
Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %z3 = alloca i64
 %y2 = alloca i64
 %x1 = alloca i64
 store i64 10, i64* %x1
 store i64 20, i64* %y2
 %x_val4 = load i64, i64* %x1
 %y_val5 = load i64, i64* %y2
 %tmp6 = add i64 %x_val4, %y_val5
 store i64 %tmp6, i64* %z3
 %z_val7 = load i64, i64* %z3
 ret i64 %z_val7
}

TEST PASSED

---------------------------------------
Found test file: assignment-06-passing-tests/test02.dlp
Test #2: assignment-06-passing-tests/test02.dlp
Running compiler: ./_build/default/driver.exe assignment-06-passing-tests/test02.dlp
Parsing successful!
AST:
Program
├─DeclStm: VarDecl
│          └─Declaration
│            ├─Ident: sum
│            ├─Type: 
│            └─Body: IntLit(0)
├─ForStm
│ ├─Init: ForInitDecl: VarDecl
│ │                    └─Declaration
│ │                      ├─Ident: i
│ │                      ├─Type: 
│ │                      └─Body: IntLit(0)
│ ├─Cond: BinOp
│ │       ├─Lval
│ │       │ └─Var(i)
│ │       ├─Lt
│ │       └─IntLit(10)
│ ├─Update: Assignment
│ │         ├─Var(i)
│ │         └─BinOp
│ │           ├─Lval
│ │           │ └─Var(i)
│ │           ├─PLUS
│ │           └─IntLit(1)
│ └─Body: CompoundStm
│         └─CompoundStm
│           ├─IfStm
│           │ ├─Cond: BinOp
│           │ │       ├─BinOp
│           │ │       │ ├─Lval
│           │ │       │ │ └─Var(i)
│           │ │       │ ├─Rem
│           │ │       │ └─IntLit(2)
│           │ │       ├─Eq
│           │ │       └─IntLit(0)
│           │ └─Then-Branch: CompoundStm
│           │                └─CompoundStm
│           │                  └─ContinueStm
│           ├─ExprStm: Assignment
│           │          ├─Var(sum)
│           │          └─BinOp
│           │            ├─Lval
│           │            │ └─Var(sum)
│           │            ├─PLUS
│           │            └─Lval
│           │              └─Var(i)
│           └─IfStm
│             ├─Cond: BinOp
│             │       ├─Lval
│             │       │ └─Var(sum)
│             │       ├─Gt
│             │       └─IntLit(20)
│             └─Then-Branch: CompoundStm
│                            └─CompoundStm
│                              └─BreakStm
└─ReturnValStm: Lval
                └─Var(sum)
Semantic analysis successful!
test1Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %i2 = alloca i64
 %sum1 = alloca i64
 store i64 0, i64* %sum1
 store i64 0, i64* %i2
 br label %for_cond3
for_cond3:
 %i_val7 = load i64, i64* %i2
 %tmp8 = icmp slt i64 %i_val7, 10
 br i1 %tmp8, label %for_body4, label %for_end6
for_body4:
 %i_val9 = load i64, i64* %i2
 %tmp10 = srem i64 %i_val9, 2
 %tmp11 = icmp eq i64 %tmp10, 0
 br i1 %tmp11, label %then12, label %else13
then12:
 br label %for_update5
else13:
 br label %if_end14
if_end14:
 %sum_val15 = load i64, i64* %sum1
 %i_val16 = load i64, i64* %i2
 %tmp17 = add i64 %sum_val15, %i_val16
 store i64 %tmp17, i64* %sum1
 %sum_val18 = load i64, i64* %sum1
 %tmp19 = icmp sgt i64 %sum_val18, 20
 br i1 %tmp19, label %then20, label %else21
then20:
 br label %for_end6
else21:
 br label %if_end22
if_end22:
 br label %for_update5
for_update5:
 %i_val23 = load i64, i64* %i2
 %tmp24 = add i64 %i_val23, 1
 store i64 %tmp24, i64* %i2
 br label %for_cond3
for_end6:
 %sum_val25 = load i64, i64* %sum1
 ret i64 %sum_val25
}

TEST PASSED

---------------------------------------
Found test file: assignment-06-passing-tests/test03.dlp
Test #3: assignment-06-passing-tests/test03.dlp
Running compiler: ./_build/default/driver.exe assignment-06-passing-tests/test03.dlp
Parsing successful!
AST:
Program
├─DeclStm: VarDecl
│          └─Declaration
│            ├─Ident: i
│            ├─Type: 
│            └─Body: IntLit(0)
├─WhileStm
│ ├─Cond: BinOp
│ │       ├─Lval
│ │       │ └─Var(i)
│ │       ├─Lt
│ │       └─IntLit(3)
│ └─Body: CompoundStm
│         └─CompoundStm
│           ├─DeclStm: VarDecl
│           │          └─Declaration
│           │            ├─Ident: j
│           │            ├─Type: 
│           │            └─Body: IntLit(0)
│           ├─ForStm
│           │ ├─Init: 
│           │ ├─Cond: BinOp
│           │ │       ├─Lval
│           │ │       │ └─Var(j)
│           │ │       ├─Lt
│           │ │       └─IntLit(2)
│           │ ├─Update: Assignment
│           │ │         ├─Var(j)
│           │ │         └─BinOp
│           │ │           ├─Lval
│           │ │           │ └─Var(j)
│           │ │           ├─PLUS
│           │ │           └─IntLit(1)
│           │ └─Body: CompoundStm
│           │         └─CompoundStm
│           │           ├─ExprStm: Call
│           │           │          ├─FunName: print_integer
│           │           │          └─Args
│           │           │            └─Lval
│           │           │              └─Var(i)
│           │           └─BreakStm
│           └─ExprStm: Assignment
│                      ├─Var(i)
│                      └─BinOp
│                        ├─Lval
│                        │ └─Var(i)
│                        ├─PLUS
│                        └─IntLit(1)
└─ReturnValStm: IntLit(0)
Semantic analysis successful!
test1Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %j7 = alloca i64
 %i1 = alloca i64
 store i64 0, i64* %i1
 br label %while_cond2
while_cond2:
 %i_val5 = load i64, i64* %i1
 %tmp6 = icmp slt i64 %i_val5, 3
 br i1 %tmp6, label %while_body3, label %while_end4
while_body3:
 store i64 0, i64* %j7
 br label %for_cond8
for_cond8:
 %j_val12 = load i64, i64* %j7
 %tmp13 = icmp slt i64 %j_val12, 2
 br i1 %tmp13, label %for_body9, label %for_end11
for_body9:
 %i_val14 = load i64, i64* %i1
 call void @print_integer (i64 %i_val14)
 br label %for_end11
for_update10:
 %j_val15 = load i64, i64* %j7
 %tmp16 = add i64 %j_val15, 1
 store i64 %tmp16, i64* %j7
 br label %for_cond8
for_end11:
 %i_val17 = load i64, i64* %i1
 %tmp18 = add i64 %i_val17, 1
 store i64 %tmp18, i64* %i1
 br label %while_cond2
while_end4:
 ret i64 0
}

TEST PASSED

---------------------------------------
Found test file: assignment-06-passing-tests/test04.dlp
Test #4: assignment-06-passing-tests/test04.dlp
Running compiler: ./_build/default/driver.exe assignment-06-passing-tests/test04.dlp
Parsing successful!
AST:
Program
├─DeclStm: VarDecl
│          └─Declaration
│            ├─Ident: i
│            ├─Type: 
│            └─Body: IntLit(0)
├─WhileStm
│ ├─Cond: BinOp
│ │       ├─Lval
│ │       │ └─Var(i)
│ │       ├─Lt
│ │       └─IntLit(5)
│ └─Body: CompoundStm
│         └─CompoundStm
│           ├─DeclStm: VarDecl
│           │          └─Declaration
│           │            ├─Ident: j
│           │            ├─Type: 
│           │            └─Body: IntLit(0)
│           ├─WhileStm
│           │ ├─Cond: BinOp
│           │ │       ├─Lval
│           │ │       │ └─Var(j)
│           │ │       ├─Lt
│           │ │       └─IntLit(5)
│           │ └─Body: CompoundStm
│           │         └─CompoundStm
│           │           ├─IfStm
│           │           │ ├─Cond: BinOp
│           │           │ │       ├─Lval
│           │           │ │       │ └─Var(j)
│           │           │ │       ├─Eq
│           │           │ │       └─IntLit(2)
│           │           │ └─Then-Branch: CompoundStm
│           │           │                └─CompoundStm
│           │           │                  └─BreakStm
│           │           └─ExprStm: Assignment
│           │                      ├─Var(j)
│           │                      └─BinOp
│           │                        ├─Lval
│           │                        │ └─Var(j)
│           │                        ├─PLUS
│           │                        └─IntLit(1)
│           └─ExprStm: Assignment
│                      ├─Var(i)
│                      └─BinOp
│                        ├─Lval
│                        │ └─Var(i)
│                        ├─PLUS
│                        └─IntLit(1)
└─ReturnValStm: IntLit(0)
Semantic analysis successful!
Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %j7 = alloca i64
 %i1 = alloca i64
 store i64 0, i64* %i1
 br label %while_cond2
while_cond2:
 %i_val5 = load i64, i64* %i1
 %tmp6 = icmp slt i64 %i_val5, 5
 br i1 %tmp6, label %while_body3, label %while_end4
while_body3:
 store i64 0, i64* %j7
 br label %while_cond8
while_cond8:
 %j_val11 = load i64, i64* %j7
 %tmp12 = icmp slt i64 %j_val11, 5
 br i1 %tmp12, label %while_body9, label %while_end10
while_body9:
 %j_val13 = load i64, i64* %j7
 %tmp14 = icmp eq i64 %j_val13, 2
 br i1 %tmp14, label %then15, label %else16
then15:
 br label %while_end10
else16:
 br label %if_end17
if_end17:
 %j_val18 = load i64, i64* %j7
 %tmp19 = add i64 %j_val18, 1
 store i64 %tmp19, i64* %j7
 br label %while_cond8
while_end10:
 %i_val20 = load i64, i64* %i1
 %tmp21 = add i64 %i_val20, 1
 store i64 %tmp21, i64* %i1
 br label %while_cond2
while_end4:
 ret i64 0
}

TEST PASSED

---------------------------------------
Found test file: assignment-06-passing-tests/test05.dlp
Test #5: assignment-06-passing-tests/test05.dlp
Running compiler: ./_build/default/driver.exe assignment-06-passing-tests/test05.dlp
Parsing successful!
AST:
Program
├─DeclStm: VarDecl
│          └─Declaration
│            ├─Ident: a
│            ├─Type: 
│            └─Body: IntLit(1)
├─DeclStm: VarDecl
│          └─Declaration
│            ├─Ident: b
│            ├─Type: 
│            └─Body: IntLit(2)
├─ForStm
│ ├─Init: ForInitExpr: Assignment
│ │                    ├─Var(a)
│ │                    └─IntLit(0)
│ ├─Cond: BinOp
│ │       ├─Lval
│ │       │ └─Var(a)
│ │       ├─Lt
│ │       └─IntLit(5)
│ ├─Update: Assignment
│ │         ├─Var(a)
│ │         └─BinOp
│ │           ├─Lval
│ │           │ └─Var(a)
│ │           ├─PLUS
│ │           └─IntLit(1)
│ └─Body: CompoundStm
│         └─CompoundStm
│           └─WhileStm
│             ├─Cond: BinOp
│             │       ├─Lval
│             │       │ └─Var(b)
│             │       ├─Lt
│             │       └─IntLit(5)
│             └─Body: CompoundStm
│                     └─CompoundStm
│                       ├─IfStm
│                       │ ├─Cond: BinOp
│                       │ │       ├─Lval
│                       │ │       │ └─Var(b)
│                       │ │       ├─Eq
│                       │ │       └─IntLit(3)
│                       │ └─Then-Branch: CompoundStm
│                       │                └─CompoundStm
│                       │                  └─ContinueStm
│                       └─ExprStm: Assignment
│                                  ├─Var(b)
│                                  └─BinOp
│                                    ├─Lval
│                                    │ └─Var(b)
│                                    ├─PLUS
│                                    └─IntLit(1)
└─ReturnValStm: IntLit(0)
Semantic analysis successful!
test1Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %b2 = alloca i64
 %a1 = alloca i64
 store i64 1, i64* %a1
 store i64 2, i64* %b2
 store i64 0, i64* %a1
 br label %for_cond3
for_cond3:
 %a_val7 = load i64, i64* %a1
 %tmp8 = icmp slt i64 %a_val7, 5
 br i1 %tmp8, label %for_body4, label %for_end6
for_body4:
 br label %while_cond9
while_cond9:
 %b_val12 = load i64, i64* %b2
 %tmp13 = icmp slt i64 %b_val12, 5
 br i1 %tmp13, label %while_body10, label %while_end11
while_body10:
 %b_val14 = load i64, i64* %b2
 %tmp15 = icmp eq i64 %b_val14, 3
 br i1 %tmp15, label %then16, label %else17
then16:
 br label %while_cond9
else17:
 br label %if_end18
if_end18:
 %b_val19 = load i64, i64* %b2
 %tmp20 = add i64 %b_val19, 1
 store i64 %tmp20, i64* %b2
 br label %while_cond9
while_end11:
 br label %for_update5
for_update5:
 %a_val21 = load i64, i64* %a1
 %tmp22 = add i64 %a_val21, 1
 store i64 %tmp22, i64* %a1
 br label %for_cond3
for_end6:
 ret i64 0
}

TEST PASSED

---------------------------------------
Found test file: assignment-06-passing-tests/test06.dlp
Test #6: assignment-06-passing-tests/test06.dlp
Running compiler: ./_build/default/driver.exe assignment-06-passing-tests/test06.dlp
Parsing successful!
AST:
Program
├─DeclStm: VarDecl
│          └─Declaration
│            ├─Ident: x
│            ├─Type: 
│            └─Body: IntLit(10)
├─ExprStm: Assignment
│          ├─Var(x)
│          └─BinOp
│            ├─Lval
│            │ └─Var(x)
│            ├─PLUS
│            └─IntLit(20)
└─ReturnValStm: Lval
                └─Var(x)
Semantic analysis successful!
Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %x1 = alloca i64
 store i64 10, i64* %x1
 %x_val2 = load i64, i64* %x1
 %tmp3 = add i64 %x_val2, 20
 store i64 %tmp3, i64* %x1
 %x_val4 = load i64, i64* %x1
 ret i64 %x_val4
}

TEST PASSED

---------------------------------------
Found test file: assignment-06-passing-tests/test07.dlp
Test #7: assignment-06-passing-tests/test07.dlp
Running compiler: ./_build/default/driver.exe assignment-06-passing-tests/test07.dlp
Parsing successful!
AST:
Program
├─DeclStm: VarDecl
│          └─Declaration
│            ├─Ident: x
│            ├─Type: 
│            └─Body: IntLit(10)
├─DeclStm: VarDecl
│          └─Declaration
│            ├─Ident: y
│            ├─Type: 
│            └─Body: IntLit(20)
├─ExprStm: Assignment
│          ├─Var(x)
│          └─BinOp
│            ├─Lval
│            │ └─Var(x)
│            ├─Mul
│            └─Lval
│              └─Var(y)
└─ReturnValStm: Lval
                └─Var(x)
Semantic analysis successful!
Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %y2 = alloca i64
 %x1 = alloca i64
 store i64 10, i64* %x1
 store i64 20, i64* %y2
 %x_val3 = load i64, i64* %x1
 %y_val4 = load i64, i64* %y2
 %tmp5 = mul i64 %x_val3, %y_val4
 store i64 %tmp5, i64* %x1
 %x_val6 = load i64, i64* %x1
 ret i64 %x_val6
}

TEST PASSED

---------------------------------------
Found test file: assignment-06-passing-tests/test08.dlp
Test #8: assignment-06-passing-tests/test08.dlp
Running compiler: ./_build/default/driver.exe assignment-06-passing-tests/test08.dlp
Parsing successful!
AST:
Program
├─DeclStm: VarDecl
│          └─Declaration
│            ├─Ident: x
│            ├─Type: 
│            └─Body: IntLit(10)
├─IfStm
│ ├─Cond: BinOp
│ │       ├─Lval
│ │       │ └─Var(x)
│ │       ├─Lt
│ │       └─IntLit(20)
│ ├─Then-Branch: CompoundStm
│ │              └─CompoundStm
│ │                └─ExprStm: Assignment
│ │                           ├─Var(x)
│ │                           └─BinOp
│ │                             ├─Lval
│ │                             │ └─Var(x)
│ │                             ├─PLUS
│ │                             └─IntLit(7)
│ └─Else-Branch: CompoundStm
│                └─CompoundStm
│                  └─ExprStm: Assignment
│                             ├─Var(x)
│                             └─BinOp
│                               ├─Lval
│                               │ └─Var(x)
│                               ├─Minus
│                               └─IntLit(5)
└─ReturnValStm: Lval
                └─Var(x)
Semantic analysis successful!
Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %x1 = alloca i64
 store i64 10, i64* %x1
 %x_val2 = load i64, i64* %x1
 %tmp3 = icmp slt i64 %x_val2, 20
 br i1 %tmp3, label %then4, label %else5
then4:
 %x_val7 = load i64, i64* %x1
 %tmp8 = add i64 %x_val7, 7
 store i64 %tmp8, i64* %x1
 br label %if_end6
else5:
 %x_val9 = load i64, i64* %x1
 %tmp10 = sub i64 %x_val9, 5
 store i64 %tmp10, i64* %x1
 br label %if_end6
if_end6:
 %x_val11 = load i64, i64* %x1
 ret i64 %x_val11
}

TEST PASSED

---------------------------------------
Found test file: assignment-06-passing-tests/test09.dlp
Test #9: assignment-06-passing-tests/test09.dlp
Running compiler: ./_build/default/driver.exe assignment-06-passing-tests/test09.dlp
Parsing successful!
AST:
Program
├─DeclStm: VarDecl
│          └─Declaration
│            ├─Ident: x
│            ├─Type: 
│            └─Body: IntLit(5)
├─CompoundStm
│ └─CompoundStm
│   ├─DeclStm: VarDecl
│   │          └─Declaration
│   │            ├─Ident: x
│   │            ├─Type: 
│   │            └─Body: IntLit(10)
│   └─ExprStm: Call
│              ├─FunName: print_integer
│              └─Args
│                └─Lval
│                  └─Var(x)
├─ExprStm: Call
│          ├─FunName: print_integer
│          └─Args
│            └─Lval
│              └─Var(x)
└─ReturnValStm: IntLit(0)
Semantic analysis successful!
Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %x2 = alloca i64
 %x1 = alloca i64
 store i64 5, i64* %x1
 store i64 10, i64* %x2
 %x_val3 = load i64, i64* %x2
 call void @print_integer (i64 %x_val3)
 %x_val4 = load i64, i64* %x1
 call void @print_integer (i64 %x_val4)
 ret i64 0
}

TEST PASSED

---------------------------------------
Found test file: assignment-06-passing-tests/test10.dlp
Test #10: assignment-06-passing-tests/test10.dlp
Running compiler: ./_build/default/driver.exe assignment-06-passing-tests/test10.dlp
Parsing successful!
AST:
Program
├─DeclStm: VarDecl
│          └─Declaration
│            ├─Ident: x
│            ├─Type: 
│            └─Body: BooleanLit(true)
├─DeclStm: VarDecl
│          └─Declaration
│            ├─Ident: y
│            ├─Type: 
│            └─Body: BooleanLit(false)
├─DeclStm: VarDecl
│          └─Declaration
│            ├─Ident: z
│            ├─Type: 
│            └─Body: BinOp
│                    ├─Lval
│                    │ └─Var(x)
│                    ├─Lor
│                    └─BinOp
│                      ├─BinOp
│                      │ ├─IntLit(1)
│                      │ ├─Div
│                      │ └─IntLit(0)
│                      ├─Eq
│                      └─IntLit(0)
└─ReturnValStm: IntLit(0)
Semantic analysis successful!
Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %z3 = alloca i1
 %y2 = alloca i1
 %x1 = alloca i1
 store i1 1, i1* %x1
 store i1 0, i1* %y2
 %tmp4 = alloca i1
 %x_val7 = load i1, i1* %x1
 store i1 %x_val7, i1* %tmp4
 br i1 %x_val7, label %end6, label %right_eval5
right_eval5:
 %tmp8 = sdiv i64 1, 0
 %tmp9 = icmp eq i64 %tmp8, 0
 store i1 %tmp9, i1* %tmp4
 br label %end6
end6:
 %tmp_val10 = load i1, i1* %tmp4
 store i1 %tmp_val10, i1* %z3
 ret i64 0
}

TEST PASSED

---------------------------------------
Found test file: assignment-06-passing-tests/test11.dlp
Test #11: assignment-06-passing-tests/test11.dlp
Running compiler: ./_build/default/driver.exe assignment-06-passing-tests/test11.dlp
Parsing successful!
AST:
Program
├─DeclStm: VarDecl
│          └─Declaration
│            ├─Ident: x
│            ├─Type: 
│            └─Body: IntLit(5)
├─DeclStm: VarDecl
│          └─Declaration
│            ├─Ident: neg_x
│            ├─Type: 
│            └─Body: UnOp
│                    ├─Neg
│                    └─Lval
│                      └─Var(x)
└─ReturnValStm: Lval
                └─Var(neg_x)
Semantic analysis successful!
Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %neg_x2 = alloca i64
 %x1 = alloca i64
 store i64 5, i64* %x1
 %x_val3 = load i64, i64* %x1
 %tmp4 = sub i64 0, %x_val3
 store i64 %tmp4, i64* %neg_x2
 %neg_x_val5 = load i64, i64* %neg_x2
 ret i64 %neg_x_val5
}

TEST PASSED

---------------------------------------
Found test file: assignment-06-passing-tests/test12.dlp
Test #12: assignment-06-passing-tests/test12.dlp
Running compiler: ./_build/default/driver.exe assignment-06-passing-tests/test12.dlp
Parsing successful!
AST:
Program
├─DeclStm: VarDecl
│          └─Declaration
│            ├─Ident: a
│            ├─Type: 
│            └─Body: IntLit(10)
├─DeclStm: VarDecl
│          └─Declaration
│            ├─Ident: b
│            ├─Type: 
│            └─Body: IntLit(20)
├─DeclStm: VarDecl
│          └─Declaration
│            ├─Ident: is_equal
│            ├─Type: 
│            └─Body: BinOp
│                    ├─Lval
│                    │ └─Var(a)
│                    ├─Eq
│                    └─Lval
│                      └─Var(b)
└─ReturnValStm: IntLit(0)
Semantic analysis successful!
Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %is_equal3 = alloca i1
 %b2 = alloca i64
 %a1 = alloca i64
 store i64 10, i64* %a1
 store i64 20, i64* %b2
 %a_val4 = load i64, i64* %a1
 %b_val5 = load i64, i64* %b2
 %tmp6 = icmp eq i64 %a_val4, %b_val5
 store i1 %tmp6, i1* %is_equal3
 ret i64 0
}

TEST PASSED

---------------------------------------
Found test file: assignment-06-passing-tests/test13.dlp
Test #13: assignment-06-passing-tests/test13.dlp
Running compiler: ./_build/default/driver.exe assignment-06-passing-tests/test13.dlp
Parsing successful!
AST:
Program
├─DeclStm: VarDecl
│          └─Declaration
│            ├─Ident: x
│            ├─Type: 
│            └─Body: Call
│                    ├─FunName: read_integer
│                    └─Args
├─ExprStm: Call
│          ├─FunName: print_integer
│          └─Args
│            └─Lval
│              └─Var(x)
└─ReturnValStm: IntLit(0)
Semantic analysis successful!
Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %x1 = alloca i64
 %tmp2 = call i64 @read_integer ()
 store i64 %tmp2, i64* %x1
 %x_val3 = load i64, i64* %x1
 call void @print_integer (i64 %x_val3)
 ret i64 0
}

TEST PASSED

---------------------------------------
Found test file: assignment-06-passing-tests/test14.dlp
Test #14: assignment-06-passing-tests/test14.dlp
Running compiler: ./_build/default/driver.exe assignment-06-passing-tests/test14.dlp
Parsing successful!
AST:
Program
├─DeclStm: VarDecl
│          └─Declaration
│            ├─Ident: x
│            ├─Type: 
│            └─Body: IntLit(15)
├─IfStm
│ ├─Cond: BinOp
│ │       ├─Lval
│ │       │ └─Var(x)
│ │       ├─Gt
│ │       └─IntLit(10)
│ └─Then-Branch: CompoundStm
│                └─CompoundStm
│                  └─IfStm
│                    ├─Cond: BinOp
│                    │       ├─Lval
│                    │       │ └─Var(x)
│                    │       ├─Lt
│                    │       └─IntLit(20)
│                    └─Then-Branch: CompoundStm
│                                   └─CompoundStm
│                                     └─ExprStm: Call
│                                                ├─FunName: print_integer
│                                                └─Args
│                                                  └─Lval
│                                                    └─Var(x)
└─ReturnValStm: IntLit(0)
Semantic analysis successful!
Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %x1 = alloca i64
 store i64 15, i64* %x1
 %x_val2 = load i64, i64* %x1
 %tmp3 = icmp sgt i64 %x_val2, 10
 br i1 %tmp3, label %then4, label %else5
then4:
 %x_val7 = load i64, i64* %x1
 %tmp8 = icmp slt i64 %x_val7, 20
 br i1 %tmp8, label %then9, label %else10
then9:
 %x_val12 = load i64, i64* %x1
 call void @print_integer (i64 %x_val12)
 br label %if_end11
else10:
 br label %if_end11
if_end11:
 br label %if_end6
else5:
 br label %if_end6
if_end6:
 ret i64 0
}

TEST PASSED

---------------------------------------
Found test file: assignment-06-passing-tests/test15.dlp
Test #15: assignment-06-passing-tests/test15.dlp
Running compiler: ./_build/default/driver.exe assignment-06-passing-tests/test15.dlp
Parsing successful!
AST:
Program
├─DeclStm: VarDecl
│          └─Declaration
│            ├─Ident: a
│            ├─Type: 
│            └─Body: IntLit(10)
├─DeclStm: VarDecl
│          └─Declaration
│            ├─Ident: b
│            ├─Type: 
│            └─Body: IntLit(3)
├─DeclStm: VarDecl
│          └─Declaration
│            ├─Ident: sum
│            ├─Type: 
│            └─Body: BinOp
│                    ├─Lval
│                    │ └─Var(a)
│                    ├─PLUS
│                    └─Lval
│                      └─Var(b)
├─DeclStm: VarDecl
│          └─Declaration
│            ├─Ident: diff
│            ├─Type: 
│            └─Body: BinOp
│                    ├─Lval
│                    │ └─Var(a)
│                    ├─Minus
│                    └─Lval
│                      └─Var(b)
├─DeclStm: VarDecl
│          └─Declaration
│            ├─Ident: prod
│            ├─Type: 
│            └─Body: BinOp
│                    ├─Lval
│                    │ └─Var(a)
│                    ├─Mul
│                    └─Lval
│                      └─Var(b)
├─DeclStm: VarDecl
│          └─Declaration
│            ├─Ident: quot
│            ├─Type: 
│            └─Body: BinOp
│                    ├─Lval
│                    │ └─Var(a)
│                    ├─Div
│                    └─Lval
│                      └─Var(b)
├─DeclStm: VarDecl
│          └─Declaration
│            ├─Ident: rem
│            ├─Type: 
│            └─Body: BinOp
│                    ├─Lval
│                    │ └─Var(a)
│                    ├─Rem
│                    └─Lval
│                      └─Var(b)
└─ReturnValStm: IntLit(0)
Semantic analysis successful!
Code generation successful!
Generated Code:
declare i64 @read_integer()
declare void @print_integer(i64)

define i64 @dolphin_main () {
 %rem19 = alloca i64
 %quot15 = alloca i64
 %prod11 = alloca i64
 %diff7 = alloca i64
 %sum3 = alloca i64
 %b2 = alloca i64
 %a1 = alloca i64
 store i64 10, i64* %a1
 store i64 3, i64* %b2
 %a_val4 = load i64, i64* %a1
 %b_val5 = load i64, i64* %b2
 %tmp6 = add i64 %a_val4, %b_val5
 store i64 %tmp6, i64* %sum3
 %a_val8 = load i64, i64* %a1
 %b_val9 = load i64, i64* %b2
 %tmp10 = sub i64 %a_val8, %b_val9
 store i64 %tmp10, i64* %diff7
 %a_val12 = load i64, i64* %a1
 %b_val13 = load i64, i64* %b2
 %tmp14 = mul i64 %a_val12, %b_val13
 store i64 %tmp14, i64* %prod11
 %a_val16 = load i64, i64* %a1
 %b_val17 = load i64, i64* %b2
 %tmp18 = sdiv i64 %a_val16, %b_val17
 store i64 %tmp18, i64* %quot15
 %a_val20 = load i64, i64* %a1
 %b_val21 = load i64, i64* %b2
 %tmp22 = srem i64 %a_val20, %b_val21
 store i64 %tmp22, i64* %rem19
 ret i64 0
}

TEST PASSED

=======================================
Test Summary:
Total Tests Run: 15
Passed Tests:    15
Failed Tests:    0
=======================================
